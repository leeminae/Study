1. 소프트웨어 테스팅의 기초

1. 테스팅이 왜 필요한가?
- 소프트웨어가 올바르게 동작하지 않는 경우 금전적, 시간적등의 손실이 일어날수 있다.
  소프트웨어 시스테의 문제를 최소화하기 위해 테스팅이 필요하다.

2. 테스팅이란 무엇인가?
- 응용 프로그램 또는 시스템의 동작과 성능, 안정성이 사용자가 요구하는 수준을 만족하는지 확인하기 위해 결함을 발견하는 활동이다.

3. 테스팅의 일반적인 원리
1) 테스팅은 결함이 존재함을 밝히는 활동이다.
 - 결함이 전혀 발견되지 않는 경우, 해당 소프트웨어는 결함이 없다고는 할 수 없다.
2) 완벽한 테스팅은 불가능하다.
 - 소프트웨어 시스펨의 모든 입력값 및 출력값의 조합을 테스트하는 것은 불가능하다.
 - 무한 경로 : 프로그램에는 너무 많은 실행 경로가 있어서 모두 테스트 할 수 없음
 - 무한 입력값 : 가능한 입력값 조합이 너무 많아서 모두 테스트 할 수 없음.
 - 무한 타이밍 : 사용자 인터페이스와 디자인 이슈가 너무 복잡하고 GUI 이벤트 발생 순서에 대한 조합이 많아 완벽하게 테스트 할 수 없음.
3) 개발 초기에 테스팅을 시작하라.
4) 결함 집중
 - 보통 적은 수의 모듈에서 대다수의 결함이 발견되거나, 운영상의 장애를 초래한다.
5) 살충제 패러독스
 - 동일한 테스트를 반복 수행하면 더이상 새로운 결함을 찾기 어렵다. 새로운 결함이나 미처 발견하지 못한 결함을 찾기 위해 테스트 케이스를 리뷰하고 현행화한다.
6) 테스팅은 정황에 의존적이다.
 - 테스트의 제품에 따라 다른 방시으로 진행해야 한다.
7) 오류-부재의 궤변
 - 개발한 시스템이 사용자의 필요와 기대에 부응하지 못하고 쓸모없다면 결함을 찾는 활동도 의미가 없다.
   개발한 제품은 요구사항과 일치하고 사용에 적합해야 한다.

4. 테스트 프로세스의 기초
1) 테스트 계획과 제어
 - 테스팅 목표와 각 테스트 활동의 명세 사항을 정의하는 활동
2) 테스트 분석과 설계
 - 일반적인 테스팅 목적을 실제적이고 구체적인 테스트 조건과 테스트 케이스로 변환하는 활동
 - 테스트 베이시스 리뷰
 - 시스템과 요구사항의 테스트 용이성을 평가함
 - 테스트 환경을 설정하고 테스트에 요구되는 기반구조와 도구를 정의
3) 테스트 구현과 실행
 - 테스트 실행을 위해 테스트 케이스를 특정한 순서에 따라 결합하여 테스트 프로시저 또는 스크립트를 명세화하고 테스트 실행에 필요한 다른 정보를 취합하고
   테스트 환경을 구축하고 테스트를 실행하는 활동
 - 테스트케이스 개발과 우선순위 선정
 - 효과적인 테스트 실행을 위해 테스트케이스로부터 테스트 스위트를 작성함
4) 테스트 완료조건 평가와 리포팅
 - 초기에 정의된 테스트 목표에 비해 실제 테스트가 어느 정도 실행되었는지를 평가하는 활동이다. 이 활동은 각 테스트 레벨마다 수행되어야 함
5) 테스트 마가
 - 완료된 테스트 활동에서 데이터를 수집하여 테스트에서 발견된 사실 및 수치적 ㅔ이터와 함께 테스팅 경험과 테스트웨어를 종합하고 축적하는 활동
 - 회고 및 테스팅 과정에서의 교훈 분석

테스팅의 목적 : 남아있는 결함 발견, 명세 충족 확인, 사용자 및 비즈니스의 요구 충족 확인, 결함 예방, 품질 수준에 대한 자신감 확보
바람직한 테스팅 : 개발 초기부터 테스팅을 시작, 작품에 따라 테스팅 전략도 다르게 세워야함, 완벽한 테스팅은 불가능하므로 전략적으로 접근해야 함
테스트 프로세스 심사 모델 : TMMi, TIM, TPI
테스팅이 종료되는 조건 : 미리 정해둔 기준을 모두 달성 했을때, 릴리즈를 결정할 수 있는 제품에 대한 충분한 정도가 있을 때

- 용어
품질(Quality) : 컴포넌트, 시스템 또는 프로세스가 명시된 요구사항을 충족시키는 정도
결함(Defects, Bug, Fault) : 요구된 기능을 적절히 처리하지 못하는 것으로 장애를 발생시킨다. 오류 또는 실수의 결과, 코드/소프트웨어/시스템/문서상으 결함
장애(Failure) : 코드에 존재하는 결함의 실행, 환경적 조건에 의한 시스템의 부적절한 처리
오류(Error, Mistake) : 부정확한 결과를 초래하는 인간의 활동
리스크(Risk) : 미래에 부정적 결과로 끝날 수 있는 요소, 주로 영향력과 발생 가능성으로 표현됨
효과적(Effective) 테스트 : 계획됐거나 원했던 테스트 결과 산출, 효과적인 테스터는 테스팅 노력으로부터 어떤 결과를 도출 할 것이니 결정한다.
효율적(Efficient) 테스트 : 원했던 테스트 결과 산출을 생산적(효율적)으로 수행한다. 효율적 테스터는 가용한 리소스(시간,자금,인력)를 적절하고 현명하게 배치한다.
확인 테스팅(Confirmation testinig) : 결함을 수정했는지 확인하는 테스팅, 이전에 실패했던 테스트를 수행함
리그레이션 테스팅(Regression testing) : 수정으로 인해 변경되지 않은 소프트웨어 영역에 새로운 결함이 유입되지 않았는지 
  기존에 숨어있던 결함이 노출되지 않았는지 확인하기 위해 이전에 테스트한 프로그램을 다시 테스팅하는 작업
결함 집중(Defect clustering) : 제품 출시전 테스팅 기간 동안 적은 수의 모듈에서 대다수의 결함이 발견되거나 운영상의 장애가 나타난다.
조기 테스팅(Early testing) : 테스팅 활동은 소프트웨어나 시스템 개발 수명주기에서 가능한 한 초기에 시작되어야 한다는 원리이다.
  개발 수명주기의 마지막 단계나 출시 이후 발견된 결함을 수정하기 위한 인적 물적 자원이 조기 테스팅에 비에 월등히 높다.
테스트 베이시스 : 개발 중간 산출물 등 테스트 설계 및 구현의 기반, 요구사항 명세서, 아키텍처(소프트웨어 구조), 개발 설계 문서, 인ㅌ페이스
테스트 독립성 : 테스트 중인 소프트웨어 개발자가 설계한 테스트 < 개발팀 내의 다른 인원이 설계한 테스트 < 독립적인 테스트팀의 인원이 설계한 테슽 < 다른 조직이나 회사 소속의 인원이 설계한 테스트


