2. 소프트웨어 수명주기와 테스팅

1. 소프트웨어 개발 모델
1) V-모델(순차적 개발 모델)
- 폭포수 모델
- 각각의 개발 단계에 대응하는 테스트 레벨이 별도로 존재
- 테스트 레벨 : 컴포넌트(단위) 테스팅, 통합테스팅, 시스템테스팅, 인수테스팅

2) 반복적-점증적(Iterative-incremental) 개발 모델
- 요구사항 확림, 설계, 시스템 구현 및 테스트를 짧게 연속적으로 반복 진행하는 방식
- 대표 유형 : 프로토타이핑(Prototyping), RAD(Rapid Application Development), RUP(Rational Unifide Process), 애자일(Agile)
 *. 애자일 테스팅 : 테스트를 미리 설계하지 않음, 요구사항을 개발함과 동시에 결함을 발겨 할 수 있음, 문서를 최소화 함

3) 개발 수명주기(Lifecycle) 모델에서의 테스팅
- 필요 요건
 - 모든 개발 활동은 이에 상응하는 테스팅 활동을 동반한다.
 - 각 테스트 레벨은 그 레벨에 맞는 특정한 목적을 가지고 있다.
 - 주어진 테스트 레벨에 맞는 테스트의 분석과 설계는 대응하는 개발 활동 동안에 시작되어야 한다.
 - 개발 수명주기 동안에 문서의 초안이 작성되는 즉시 테스터는 이러한 문서를 리뷰하는 활동에 참가해야한다.

2. 태스트 레벨
1) 컴포너트 테스팅(Component Testing)
- 테스트 베이시스 : 컴포넌트 요구사항, 상세 설계, 코드
- 일반적인 테스트 대상 : 컴포넌트, 프로그램, 데이터 변환/마이그레이션 프로그램, 데이터 베이스 모듈
- 테스트 가능한 단위로 분리된 소프트웨어 모듈, 프로그램, 객체 등 내에서 결함을 찾고 그 기능을 검증하는 것
- 개발 수명주기와 시스템에 따라 시스템의 다른 부분에서 격리하여 독립적으로 수행할 수 있다.
- 코드 중심으로 수행, 단위 테스팅 프레임웍 또는 디버깅 도구 같은 개발 환경의 지원 필요

2) 통합 테스팅(Integration Testing)
- 테스트 베이시스 : 소프트웨어와 시스템 설계, 아키텍쳐, 워크플로우, 유즈케이스
- 일반적인 테스트 대상 : 서브시스템, 데이터베이스 구축, 기반환경, 인터페이스, 시스템 구성과 구성 데이터
- OS, 파일 시스템, 하드웨어 또는 시스템가, 인터페이스와 같은 시스템의 각기 다르 부분과 상호 연동하는 동작을 테스트 함

3) 시스템 테스팅(System Testing)
- 테스트 베이시스 : 시스템 및 소프트웨어 요구사항 명세, 유즈케이스, 기능명세, 리스크 분석 리포트
- 일반적인 테스트 대상 : 시스템, 사용자 및 운영 메뉴얼, 시스템 구성 및 구성 데이터
- 개발 프로젝트 차원범위)에서 정의한 전체 시스템 또는 제품의 동작에 대해 테스트 하는 것
- 테스트범위는 명확하게 해당 테스트 레벨의 마스터/레벨 테스트 계획에 정의되어 있어야함
- '환경특성 장애(Enviroment-specific failure)' 리스크를 최소화하기 위해서 가능한 실제 최종 사용 환경 또는 이와 유사한 환경에서 수행해야 함
- 기능/비기능 요구사항, 데이터 품질 특성 등을 모두 검증해야 함

4) 인수 테스팅(Accptance Testing)
- 테스트 베이시스 : 사용자 욕사항, 시스템 요구사항, 유즈케이스, 비즈니스 프로세스, 리스크 분석 리포트
- 일반적인 테스트 대상 : 완전히 통합된 시스템의 비즈니스 프로세스, 운여 및 유지보수 프로세스, 사용자 절차, 양식, 보고서, 구성 데이터
- 시스템이나 시스템의 일부 또는 특정한 비기능적인 특성에 대해 확신을 얻는 것
- 시스템을 배포하거나 실제 사용할만한 준비가 되었는지에 대해 평가
- 사용자 인수 테스팅 : 비즈니스 사용자가 시스템 사용의 적절성을 확인
- 운영상의 인수 테스팅 : 백업/복원테스팅, 재난 복구, 사용자 관리, 유지보수 작업, 데이터로드 및 마이그레이션 작업, 보안 취약성에 대한 겅기적인 점검
- 계약 인수 테스팅 : 맞춤식-개발(Custom-developed) 소프트웨어가 계약상의 인수 통과 조건을 준수하는지 확, 인수 통과 조건은 계약할때 정의됨
- 규정 인수 테스팅 : 정부 지침, 법률 또는 안전 규정 등 준수해야 하는 규정에 맞게 개발 되었는지 확인
- 알파 테스팅(공장 인수 테스팅) : 상업적으로 판매되기 전에 시장의 기존 고객이나 잠재 고객으로부터 피드백을 받기위해 진행, 개발 조직 내에서 수행(개발팀에서는 수행 안함), 
- 베타(필드) 테스팅(사이트 인수 테스팅) : 실제 환경에서 사용자 혹은 잠재 고객에 의해 수행

3. 테스트 유령
1) 기능 테스팅
- 문서화되어 있거나 테스터가 알고 있는 기능과 특징, 그리고 그것들과 특별한 시스템과ㅢ 상호운용성을 고려하여 수행하며 모든 테스트 레벨에서 수행될 수 있음
- 명세 기반 기법을 이용해 소프트웨어나 시스템의 기능성에서 테스트 조건과 테스트 케이스를 도출함
- 보안성 테스팅 : 악의적인 코드와 같은 외루로부터의 위협을 감지해 내는 것과 관련이 있는 기능(방화벽)을 확인 함
- 상호운용성 테스팅 : 하나 또는 여러개의 명시된 컴포넌트나 시스템이 서로 상호 작용하는 소프트웨어 제품의 능력을 평가하는 것

2) 비기능 테스팅
- 성능 테스팅, 부하테스팅, 스트레스 테스팅 사용성 테스팅, 유지보수성 테스팅, 신뢰성 테스팅, 이동성 테스팅 등을 포함
- 시스템이 '어떻게' 동작하는가를 테스팅 함
- 모든 테스트 레벨에서 수행할 수 있음
- 외부로 표출되는 소프트웨어의 습성을 확인할 목적으로 실행되며, 블랙박스 테스트 설계기법을 활용 함

3) 구조적 테스팅
- 모든 테스트 레벨에서 수행할 수 있음
- 특정 유형의 구조 커버리지를 평가하여 테스팅의 보장성 또는 충분함을 측정하는 것으로 명세기반 기법을 적용한 다음에 사용할 때 가장 좋은 결과를 보여줌

4) 변화 관련 테스트 : 재테스팅/리그레이션테스팅
- 결함이 발견되고 수정된 후에 원래 결하미 성공적으로 제거되었는지 확인하기 위한 테스트
- 리그레이션 테스팅 : 이미 테스트된 프로그램의 테스팅을 반복하는 것, 결함 수정 이후 변경의 결과로 새롭게 만들어지거나, 이전 결함으로 인해 발견되지 않았떤 또다른 결함을 발견하는 것

4. 유지보수 테스팅
- 변경된 부부에 대한 테스팅 이외에도 변경되지 않은 시스템 요소에 대한 리그레션 테스팅도 고려함
- 명세서가 오래되었거나 없을 경우, 도메인 지식을 가지고 있는 테스터가 없을 경우 수행하기 어려울 수 있음

- 용어
상용 소프트웨어(COTS) : 일반적인 시장, 대규모의 고객을 대상으로 개발되어 동일한 형식으로 많은 고객들에게 전달되는 소프트웨어 제품
Validation : 개발중에 또는 개발단계 말에 명시된 또는 명시되지 않았지만 사용자 관점에서의 요구사항이 만족하는지를 평가하는 프로세스
Verification : 개발 단계의 산출물이 그 단계의 초기에 설정된 조건을 만족하는지 여부를 검증하는 프로세스
블랙박스 테스팅: 컴포넌트나 시스템의 내부 구조를 참조하지 않고, 기능과 비기능을 테스트 하는 것,
 컴포넌트나 시스템의 내부 구조나 데이터에 대한 자세한 지식 없이 내부 구조를 블랙박스로 보고 명세서는 물론 입력과 출력을 분석ㅎ여 선정한 테스트 케이스를 이용하여 시스템의 결함을 발현하는 테스트 접근법
화이트박스 테스팅 : 
스트레스 테스팅 : 시스템이나 컴포넌트를 평가하기 위해 시스템이나 컴포넌트의 명시된 요구사항의 한계를 넘는 부하를 주어 수행하는 테스팅



